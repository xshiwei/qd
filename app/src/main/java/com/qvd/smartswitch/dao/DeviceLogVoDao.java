package com.qvd.smartswitch.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qvd.smartswitch.model.DeviceLogVo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_LOG_VO".
*/
public class DeviceLogVoDao extends AbstractDao<DeviceLogVo, Long> {

    public static final String TABLENAME = "DEVICE_LOG_VO";

    /**
     * Properties of entity DeviceLogVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property DeviceName = new Property(2, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceNickname = new Property(3, String.class, "deviceNickname", false, "DEVICE_NICKNAME");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property State = new Property(5, int.class, "state", false, "STATE");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
    }


    public DeviceLogVoDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceLogVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_LOG_VO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT NOT NULL ," + // 1: deviceId
                "\"DEVICE_NAME\" TEXT NOT NULL ," + // 2: deviceName
                "\"DEVICE_NICKNAME\" TEXT NOT NULL ," + // 3: deviceNickname
                "\"DATE\" TEXT NOT NULL ," + // 4: date
                "\"STATE\" INTEGER NOT NULL ," + // 5: state
                "\"TYPE\" INTEGER NOT NULL );"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_LOG_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceLogVo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDeviceId());
        stmt.bindString(3, entity.getDeviceName());
        stmt.bindString(4, entity.getDeviceNickname());
        stmt.bindString(5, entity.getDate());
        stmt.bindLong(6, entity.getState());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceLogVo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDeviceId());
        stmt.bindString(3, entity.getDeviceName());
        stmt.bindString(4, entity.getDeviceNickname());
        stmt.bindString(5, entity.getDate());
        stmt.bindLong(6, entity.getState());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceLogVo readEntity(Cursor cursor, int offset) {
        DeviceLogVo entity = new DeviceLogVo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // deviceId
            cursor.getString(offset + 2), // deviceName
            cursor.getString(offset + 3), // deviceNickname
            cursor.getString(offset + 4), // date
            cursor.getInt(offset + 5), // state
            cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceLogVo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.getString(offset + 1));
        entity.setDeviceName(cursor.getString(offset + 2));
        entity.setDeviceNickname(cursor.getString(offset + 3));
        entity.setDate(cursor.getString(offset + 4));
        entity.setState(cursor.getInt(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceLogVo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceLogVo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceLogVo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
